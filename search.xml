<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC中文乱码几种处理</title>
    <url>/2021/06/10/SpringMVC/SpringMVC%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E5%87%A0%E7%A7%8D%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="请求参数乱码"><a href="#请求参数乱码" class="headerlink" title="请求参数乱码"></a>请求参数乱码</h3><h4 id="1、-单独的转化传过来的参数的编码"><a href="#1、-单独的转化传过来的参数的编码" class="headerlink" title="1、 单独的转化传过来的参数的编码"></a>1、 单独的转化传过来的参数的编码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(request.getParameter(<span class="string">&quot;参数名&quot;</span>).getBytes(<span class="string">&quot;iso-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2、POST请求乱码-web-xml中配置-过滤编码"><a href="#2、POST请求乱码-web-xml中配置-过滤编码" class="headerlink" title="2、POST请求乱码 web.xml中配置 过滤编码"></a>2、POST请求乱码 web.xml中配置 过滤编码</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置全局字符过滤器 配置utf-8编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="响应中乱码"><a href="#响应中乱码" class="headerlink" title="响应中乱码"></a>响应中乱码</h3><h4 id="produces-设置返回数据的类型以及编码"><a href="#produces-设置返回数据的类型以及编码" class="headerlink" title="produces 设置返回数据的类型以及编码"></a>produces 设置返回数据的类型以及编码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testData&quot;,produces = &#123;&quot;text/plain;charset=utf-8&quot;,&quot;text/html;charset=utf-8&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testData</span><span class="params">(Model model, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是数据！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC配置DispatcherServlet几种方式</title>
    <url>/2021/06/10/SpringMVC/SpringMVC%E9%85%8D%E7%BD%AEDispatcherServlet%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="通过java类-DispatcherServlet-，实现Spring提供的一个抽象类"><a href="#通过java类-DispatcherServlet-，实现Spring提供的一个抽象类" class="headerlink" title="通过java类 DispatcherServlet ，实现Spring提供的一个抽象类"></a>通过java类 DispatcherServlet ，实现Spring提供的一个抽象类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置SpringMVC拦截器 Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServletInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;RootConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">	     <span class="comment">//配置拦截路径为 / 这样所以的请求的url都会被DispatcherServlet拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>,<span class="string">&quot;*.form&quot;</span>&#125;;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过web-xml配置DispatcherServlet"><a href="#通过web-xml配置DispatcherServlet" class="headerlink" title="通过web.xml配置DispatcherServlet"></a>通过web.xml配置DispatcherServlet</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置全局的Springmvc 的配置文件路径 </span></span><br><span class="line"><span class="comment">    contextConfigLocation属性是DispatcherServlet的父类FrameworkServlet的一个属性用于配置Spring上下文配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SpringMVC 的 拦截器 sevlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tomcat启动就加载servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该命令执行完后会在当前目录生成一个 .git 目录。</span><br><span class="line">使用我们指定目录作为Git仓库。</span><br></pre></td></tr></table></figure>



<h2 id="git-init-文件夹名"><a href="#git-init-文件夹名" class="headerlink" title="git init [文件夹名]"></a>git init [文件夹名]</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，</span><br><span class="line">所有 Git 需要的数据和资源都存放在这个目录中。</span><br></pre></td></tr></table></figure>



<h2 id="git-add-文件名"><a href="#git-add-文件名" class="headerlink" title="git add [文件名]"></a>git add [文件名]</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加提交文件</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87.png"></p>
<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看仓库提交文件状态</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%872.png"></p>
<h2 id="git-commit-m-‘提交说明’"><a href="#git-commit-m-‘提交说明’" class="headerlink" title="git commit -m [‘提交说明’]"></a>git commit -m [‘提交说明’]</h2><p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%873.png"></p>
<h2 id="git-clone-git-url地址"><a href="#git-clone-git-url地址" class="headerlink" title="git clone  [git url地址]"></a>git clone  [git url地址]</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。</span><br><span class="line">如果我们需要克隆到指定的目录，可以使用以下命令格式：</span><br><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-log-name-status"><a href="#git-log-name-status" class="headerlink" title="git log - -name-status"></a>git log - -name-status</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前分支的全部提交记录以及修改</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%874.png"></p>
<h2 id="git-reset-–hard-commitID"><a href="#git-reset-–hard-commitID" class="headerlink" title="git reset –hard [commitID]"></a>git reset –hard [commitID]</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切换修改记录</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%875.png"></p>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git提供了一个命令git reflog，该命令按照之前经过的所有的commit路径按序来排列，</span><br><span class="line">用来记录你的每一次命令当切换了分支修改记录以后 </span><br><span class="line">git log里就看不到当前修改之前的修改了</span><br><span class="line">通过这个记录的命令里可以找到最新的提交的id </span><br><span class="line">再通过这个id 切换回来</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%876.png"></p>
<h2 id="git-show-commitID"><a href="#git-show-commitID" class="headerlink" title="git show [commitID]"></a>git show [commitID]</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出这一次修改的全部文件修改的内容</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%877.png"></p>
]]></content>
      <categories>
        <category>代码版本控制</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrays.asList之后add(),remove()报错问题</title>
    <url>/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="1-Java-Arrays-asList-转完List以后异常情况"><a href="#1-Java-Arrays-asList-转完List以后异常情况" class="headerlink" title="1.  Java Arrays.asList 转完List以后异常情况"></a>1.  Java Arrays.asList 转完List以后异常情况</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread.test;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] str = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>&#125;;</span><br><span class="line">        List strList = Arrays.asList(str);</span><br><span class="line">        System.out.println(strList.toString());</span><br><span class="line">        <span class="comment">//Arrays.asList转的List之后，再add元素就会报异常</span></span><br><span class="line">        strList.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line">[a, b, c, d, e]</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">	at java.util.AbstractList.add(AbstractList.java:<span class="number">148</span>)</span><br><span class="line">	at java.util.AbstractList.add(AbstractList.java:<span class="number">108</span>)</span><br><span class="line">	at thread.test.Test.main(Test.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-分析报错"><a href="#2-分析报错" class="headerlink" title="2.  分析报错"></a>2.  分析报错</h4><p>​    从上面报错可以看到报错的类的List的实现类是 java.util.AbstractList实现类，看源码是在这里，他的add方法是直接抛一个上面的异常出来。</p>
<p><img src="/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87.png" alt="未命名图片"></p>
<p>看一下 Arrays.asList的实现源码：看到这个方法实现是new 一个新的ArrayList并返回，这个ArrayList是在Arrays类里的一个静态内部类，这个类继承了一个叫AbstractList的父类。</p>
<p><img src="/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%872.png"></p>
<p>也就是说这个类其实不是熟悉的ArrayList只是同名的一个内部类，同时他的父类实现了List接口，所以他可以返回一个List类型的对象，并且实现了List的部分方法，比如 get获取元素，length获取数量</p>
<p><img src="/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/image-20210623001715041.png" alt="image-20210623001715041"></p>
<p><img src="/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/image-20210623001750754.png" alt="image-20210623001750754"></p>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3.  总结"></a>3.  总结</h4><p>Arrays.asList方法其实就是 把某一个类型的数组传到方法中，在静态内部类中去封装这个传进来的数组，去实现List接口提供的方法，get() set() length() toArray()这些方法，而add() remove()这些修改实际数据数量的方法是直接抛一个异常出来。</p>
<p><img src="/2021/06/23/java-se/Arrays-asList%E4%B9%8B%E5%90%8Eadd-remove-%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/image-20210623001830127.png" alt="image-20210623001830127"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo搭建静态博客</title>
    <url>/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo - 采用Node.js开发的一个快速、简单和强大的博客框架。</p>
<p>目前github上的pages功能是支持搭建一个静态的博客，所以需要hexo这种静态博客工具，去把我们写的markdown文档结合着对应的hexo主题去把静态的博客去生成出来，发布到github仓库上去。供其他人去访问，github博客支持自定义域名设置十分方便。</p>
<h3 id="准备一个-GitHub账号"><a href="#准备一个-GitHub账号" class="headerlink" title="准备一个 GitHub账号"></a>准备一个 GitHub账号</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>首先我们需要新建一个存储博客的代码仓库，名称格式是固定的：[github用户名].github.io 。在仓库的 settings 里 有个 Pages选项，可以看到博客访问地址是<a class="link" href="https://threadgithub.github.io/">https://threadgithub.github.io/<i class="fas fa-external-link-alt"></i></a>，当然刚新建的仓库是没有任何内容的可能访问不成功。</p>
<img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605134056042.png" alt="image-20210605134056042" style="zoom: 80%;">

<h4 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h4><p>pages选项最下方有 自定义域名设置，把自己的域名输入进去保存就可以，设置了以后你会发现在仓库中生成了一个CNAME文件，文件中的内容就是你输入的自定义域名，所以也可以直接增加CNAME文件进行设置。如果想启用HTTPS下面有个强制启用HTTPS的选项勾上就可以，这个还是很实用的。</p>
<p>配置域名需要注意的点就是要<strong>设置域名的DNS配置</strong>，A记录指向threadgithub.github.io你的访问域名的ip地址。</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605134637752.png" alt="image-20210605134637752"></p>
<h2 id="创建hexo博客"><a href="#创建hexo博客" class="headerlink" title="创建hexo博客"></a>创建hexo博客</h2><h3 id="需要环境"><a href="#需要环境" class="headerlink" title="需要环境"></a>需要环境</h3><p>nodejs，git</p>
<p>因为Hexo是nodejs开发的一套博客框架，所以需要你先安装nodejs的环境。因为要绑定github推送和拉取仓库所以git也是必不可少的。</p>
<h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g    	<span class="comment">#安装hexo</span></span><br><span class="line">hexo init blog			<span class="comment">#hexo创建模板博客项目</span></span><br><span class="line"><span class="built_in">cd</span> blog				<span class="comment">#进到项目目录</span></span><br><span class="line">npm install			<span class="comment">#安装全部包依赖</span></span><br></pre></td></tr></table></figure>

<p>我们可以看一下文件结构：</p>
<p>​        <strong>source：</strong>存放博客文章markdown内容</p>
<p>​       <strong>themes</strong>：主题文件</p>
<p>​       <strong>node_modules</strong>：node install 加载的依赖模块</p>
<p>​      <strong>_config.yml</strong>：博客整体配置</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605142501876.png" alt="image-20210605142501876"></p>
<h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s <span class="comment">#启动博客服务 </span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605143328917.png" alt="image-20210605143328917"></p>
<p>这时候就可以<a class="link" href="http://localhost:4000/">http://localhost:4000<i class="fas fa-external-link-alt"></i></a>在浏览器访问了：</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605143510893.png" alt="image-20210605143510893"></p>
<h3 id="增加文章"><a href="#增加文章" class="headerlink" title="增加文章"></a>增加文章</h3><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>会在 blog/source/_posts 文件夹下创建一个叫 测试文章.md的markdown文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 测试文章</span><br></pre></td></tr></table></figure>

<p>可以简单编辑一下这篇文章</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605152929330.png" alt="image-20210605152929330"></p>
<p>当然也可以选择markdown编辑工具进行编辑，Typora 来编辑markdown所见即所得的编辑器。</p>
<h4 id="重新生成博客并预览"><a href="#重新生成博客并预览" class="headerlink" title="重新生成博客并预览"></a>重新生成博客并预览</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605153113931.png" alt="image-20210605153113931"></p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605153150346.png" alt="image-20210605153150346"></p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><h4 id="克隆主题"><a href="#克隆主题" class="headerlink" title="克隆主题"></a>克隆主题</h4><p>可能默认的主题不能满足我们的需要，这时候可以更换主题</p>
<p>选择主题可以去Hexo的中文官网去选择 ，点击可以预览并且查看Demo。<a class="link" href="https://hexo.io/themes/">https://hexo.io/themes/<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605150342676.png" alt="image-20210605150342676"></p>
<p>这里选择第一个主题，并且克隆到 blog/themes 主题文件夹下。</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605150523886.png" alt="image-20210605150523886"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JoeyBling/hexo-theme-yilia-plus.git</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605151201691.png" alt="image-20210605151201691"></p>
<h4 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h4><p>修改  blog 文件夹下根目录的 _config.yml 文件中的 theme 设置为 hexo-theme-yilia-plus</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605151548080.png" alt="image-20210605151548080"></p>
<h4 id="重新构建并查看新主题"><a href="#重新构建并查看新主题" class="headerlink" title="重新构建并查看新主题"></a>重新构建并查看新主题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment">#重新构建</span></span><br><span class="line">hexo s <span class="comment">#启动博客  在http://localhost:4000浏览器访问</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605151946963.png" alt="image-20210605151946963"></p>
<h3 id="配置Hexo绑定到GitHub仓库"><a href="#配置Hexo绑定到GitHub仓库" class="headerlink" title="配置Hexo绑定到GitHub仓库"></a>配置Hexo绑定到GitHub仓库</h3><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>修改 blog 根目录文件夹下的_config.yml文件 增加 deploy 配置  </p>
<p>type 类型为 git</p>
<p>repo 设置博客仓库的git地址</p>
<p>branch 设置仓库分支</p>
<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605153456230.png" alt="image-20210605153456230"></p>
<h4 id="推送到仓库"><a href="#推送到仓库" class="headerlink" title="推送到仓库"></a>推送到仓库</h4><p>可能会需要让你登录一下GitHub账号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d <span class="comment">#推送到github</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/05/hexo/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20210605153824325.png" alt="image-20210605153824325"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java线程-生产者消费者问题</title>
    <url>/2021/06/04/java-se/java%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h5 id="馒头实体类"><a href="#馒头实体类" class="headerlink" title="馒头实体类"></a>馒头实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 馒头类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManTou</span></span>&#123;</span><br><span class="line">	<span class="comment">//馒头id</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ManTou</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ManTou [id=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="生产者类"><a href="#生产者类" class="headerlink" title="生产者类"></a>生产者类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生产者类 生产馒头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> SyncStack syncStack = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SyncStack syncStack)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.syncStack = syncStack;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++)&#123;</span><br><span class="line">			syncStack.push(<span class="keyword">new</span> ManTou(i));	<span class="comment">//加馒头</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">1000</span>));</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消费者类"><a href="#消费者类" class="headerlink" title="消费者类"></a>消费者类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 消费者类 吃馒头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> SyncStack syncStack = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SyncStack syncStack)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.syncStack = syncStack;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++)&#123;</span><br><span class="line">			syncStack.get();	<span class="comment">//吃馒头</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">1000</span>));</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="生产者和消费者的栈"><a href="#生产者和消费者的栈" class="headerlink" title="生产者和消费者的栈"></a>生产者和消费者的栈</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生产者和消费者的栈  先生产的馒头后吃 先进后出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncStack</span></span>&#123;</span><br><span class="line">	<span class="comment">//当前馒头的索引</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//盛放馒头的框 最多生产5个馒头</span></span><br><span class="line">	<span class="keyword">private</span> ManTou[] array = <span class="keyword">new</span> ManTou[<span class="number">5</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//线程同步加馒头 一个线程在加馒头的时候 别的线程需要排队</span></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(ManTou manTou)</span></span>&#123;</span><br><span class="line"><span class="comment">/*if*/</span><span class="keyword">while</span>(index == array.length &amp;&amp; array.length == index)&#123;</span><br><span class="line">			<span class="comment">//System.out.println(&quot;满了&quot;);</span></span><br><span class="line">			<span class="comment">//如果当前要生产馒头的人发现馒头满了 如果return 这个人这个人生产的馒头就作废了，</span></span><br><span class="line">			<span class="comment">//可能导致几个人吃不到馒头，</span></span><br><span class="line"><span class="comment">//			return;	</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">//所以正确的方法是等着等到放馒头的栈没满的时候再做馒头</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如果发现当前对象上有正在睡着的线程就叫醒他 让他不要再等了 接着排队做馒头 叫醒自己  </span></span><br><span class="line">		<span class="keyword">this</span>.notify();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//叫醒这个对象上所有正在睡着的线程</span></span><br><span class="line">		<span class="comment">//this.notifyAll();</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;生产了:&quot;</span> + manTou);</span><br><span class="line">		</span><br><span class="line">		array[index] = manTou;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//线程同步方法  线程必须 排队吃馒头  (一个线程吃着馒头别的线程要只能看着)</span></span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> ManTou <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//这个位置判断是不是吃没了为什么不用if 而用while，</span></span><br><span class="line">		<span class="comment">//因为当前线程醒过来的时候 他不一定 有馒头吃 说不定此时馒头刚好被另一个线程吃完了</span></span><br><span class="line">		<span class="comment">//必须要当前线程被叫醒后 要 不断的去判断自己现在的馒头数是否有的吃 </span></span><br><span class="line">		<span class="comment">//如果有才可以吃  不然 馒头吃完了到0了 接着往下 0-- = -1 就越界了</span></span><br><span class="line"><span class="comment">/*if*/</span><span class="keyword">while</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//System.out.println(&quot;吃没了&quot;);</span></span><br><span class="line"><span class="comment">//			return null;</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>.notify();</span><br><span class="line">		</span><br><span class="line">		index--;</span><br><span class="line">		System.out.println(<span class="string">&quot;消费了:&quot;</span> + array[index]);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> array[index];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadProducerConsumer</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 线程 生产者和消费者问题</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SyncStack syncStack = <span class="keyword">new</span> SyncStack();</span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		for(int i = 0;i &lt; 20;i++)&#123;</span></span><br><span class="line"><span class="comment">//			syncStack.push(new ManTou(i));</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		System.out.println(syncStack.array);</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		for(int i = 0;i &lt; 20;i++)&#123;</span></span><br><span class="line"><span class="comment">//			syncStack.get();</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		System.out.println(syncStack.array);</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		for(int i = 10;i &lt; 20;i++)&#123;</span></span><br><span class="line"><span class="comment">//			syncStack.push(new ManTou(i));</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		System.out.println(syncStack.array);</span></span><br><span class="line">		</span><br><span class="line">		Producer producer = <span class="keyword">new</span> Producer(syncStack);</span><br><span class="line">		Consumer consumer = <span class="keyword">new</span> Consumer(syncStack);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud 使用Feign实现声明式REST调用</title>
    <url>/2021/08/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/SpringCloud-%E4%BD%BF%E7%94%A8Feign%E5%AE%9E%E7%8E%B0%E5%A3%B0%E6%98%8E%E5%BC%8FREST%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="6-使用Feign实现声明式REST调用"><a href="#6-使用Feign实现声明式REST调用" class="headerlink" title="6.使用Feign实现声明式REST调用"></a>6.使用Feign实现声明式REST调用</h1><p><img src="/2021/08/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/SpringCloud-%E4%BD%BF%E7%94%A8Feign%E5%AE%9E%E7%8E%B0%E5%A3%B0%E6%98%8E%E5%BC%8FREST%E8%B0%83%E7%94%A8/FeignRest%E8%B0%83%E7%94%A8-16298604784961.png" alt="FeignRest调用"></p>
<h2 id="环境版本-SpringCloud-Hoxton-和-SpringBoot-2-兼容版本"><a href="#环境版本-SpringCloud-Hoxton-和-SpringBoot-2-兼容版本" class="headerlink" title="环境版本 - SpringCloud Hoxton.** 和 SpringBoot 2.** 兼容版本"></a>环境版本 - SpringCloud Hoxton.** 和 SpringBoot 2.** 兼容版本</h2><blockquote>
<p>注意：SpringCloud 和 SpringBoot请到Spring官网查看版本对应关系 避免启动时一些依赖问题的错误</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot依赖 2.2.7.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringCloud依赖 Hoxton.SR7--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringCloud Eureka Client 2.2.4.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SpringCloud Eureka Server 2.2.4.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Feign 2.2.4.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Feign对于上传文件的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用RestTemplate服务之间的REST调用方式缺点"><a href="#使用RestTemplate服务之间的REST调用方式缺点" class="headerlink" title="使用RestTemplate服务之间的REST调用方式缺点"></a>使用RestTemplate服务之间的REST调用方式缺点</h2><blockquote>
<p>拼接url的方式对于简单的还可以，但是现实中对于多参数url复杂那么就会变得难以维护和复杂化，例如下面书中给到写法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//url例子</span></span><br><span class="line">String url = <span class="string">&quot;http://localhost:8010/search?name=张三&amp;username=account1&amp;age=20&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用实现</span></span><br><span class="line"><span class="keyword">public</span> User[] findById(String name, String userName, Integer age)&#123;</span><br><span class="line">    Map&lt;String,Object&gt; paramMap = Maps.newHashMap();</span><br><span class="line">    paramMap.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    paramMap.put(<span class="string">&quot;userName&quot;</span>,userName);</span><br><span class="line">    paramMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">&quot;http://localhost:8010/search?name=&#123;name&#125;&amp;username=&#123;username&#125;&amp;age=&#123;age&#125;&quot;</span>, User[].class, paramMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-Feign简介"><a href="#6-1-Feign简介" class="headerlink" title="6.1 Feign简介"></a>6.1 Feign简介</h2><blockquote>
<p>Feign 是 Netflix开发的声明式、模板化的HTTP客户端.</p>
<p>Feign 使用简单，通过创建一个接口来显示声明调用的REST资源，通过一些注解就可以来实现调用</p>
<p>Feign 也依赖于Ribbon实现了 负载均衡</p>
</blockquote>
<h2 id="6-2-为服务消费者整合-Feign"><a href="#6-2-为服务消费者整合-Feign" class="headerlink" title="6.2 为服务消费者整合 Feign"></a>6.2 为服务消费者整合 Feign</h2><h3 id="添加-Feign-的依赖"><a href="#添加-Feign-的依赖" class="headerlink" title="添加 Feign 的依赖"></a>添加 Feign 的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入 Feign 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="开启FeignCleint"><a href="#开启FeignCleint" class="headerlink" title="开启FeignCleint"></a>开启FeignCleint</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启Feign全部的Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建服务的FeignClient"><a href="#创建服务的FeignClient" class="headerlink" title="创建服务的FeignClient"></a>创建服务的FeignClient</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;thread-produce&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 服务生产者 提供的 /getUserNames 资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/getUserNames&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试调用生产者的服务"><a href="#测试调用生产者的服务" class="headerlink" title="测试调用生产者的服务"></a>测试调用生产者的服务</h3><blockquote>
<p>调用消费者服务的测试接口发现 Feigin 自动的实现了Ribbon的负载均衡</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接把Feign的接口注册进来,Feign会自动创建代理对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; userNames = userFeignClient.getUserNames();</span><br><span class="line">        <span class="keyword">return</span> userNames;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-自定义Feign-配置"><a href="#6-3-自定义Feign-配置" class="headerlink" title="6.3 自定义Feign 配置"></a>6.3 自定义Feign 配置</h2><h3 id="Feign-可以配置的选项"><a href="#Feign-可以配置的选项" class="headerlink" title="Feign 可以配置的选项"></a>Feign 可以配置的选项</h3><h4 id="目前书中介绍到的配置"><a href="#目前书中介绍到的配置" class="headerlink" title="目前书中介绍到的配置"></a>目前书中介绍到的配置</h4><ul>
<li>配置 Contract Bean的实现类  取值：SpringMvcContract 采用SpringMVC契约注解  Contract.Default 启用默认的Feign提供的契约注解</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">feignName:</span></span><br><span class="line">            <span class="comment">#相当于Request.Options</span></span><br><span class="line">            <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">            <span class="comment">#相当于Request.Options</span></span><br><span class="line">            <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">            <span class="comment">#配置Feign的日志级别，相当于代码配置方式中的Logger</span></span><br><span class="line">            <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br><span class="line">            <span class="comment">#Feign的错误解码器,相当于代码配置中的ErrorDecoder</span></span><br><span class="line">            <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line">            <span class="comment">#配置重试,相当于代码配置方式中的Retryer</span></span><br><span class="line">            <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line">            <span class="comment">#配置拦截器,相当于代码配置方式中的RequestInterceptor</span></span><br><span class="line">            <span class="attr">requestInterceptors:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">            <span class="attr">decode404:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#feign配置文件的方式比java配置优先级要高,如果想java配置优先级开这里可以设置为false</span></span><br><span class="line">    <span class="attr">default-to-properties:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure>

<h3 id="使用Java配置类形式"><a href="#使用Java配置类形式" class="headerlink" title="使用Java配置类形式"></a>使用Java配置类形式</h3><h4 id="声明-Feign的配置类"><a href="#声明-Feign的配置类" class="headerlink" title="声明 Feign的配置类"></a>声明 Feign的配置类</h4><blockquote>
<p>配置类的@Configuration注解加和不加  取决于不要被SpringBoot默认@ComponentScan注解扫描到</p>
<p>如果加了注解被扫描到后，Feign所有的Client都会共享这个设置，就达不到我们为单个client加配置的目的了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里不能加<span class="doctag">@configuration</span>注解, 因为这个注解加了以后会被主程序的 <span class="doctag">@ComponentScan</span>扫描到</span></span><br><span class="line"><span class="comment"> * 扫描到后的话 会被 全部的 FeignClient共享这个设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign 默认的契约是 Spring MVC的注解  用的是 SpringMvcContract 所以 FeignClient 可以使用mvc注解来去定义</span></span><br><span class="line"><span class="comment">     * Contract.Default() 改成了 Feign默认的契约 所以这里配置了以后就要修改FeignClient的注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contract.Default();</span><br><span class="line"><span class="comment">//        SpringMvcContract</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在-FeignCleint-中使用-Feign-配置类"><a href="#在-FeignCleint-中使用-Feign-配置类" class="headerlink" title="在 FeignCleint 中使用 Feign 配置类"></a>在 FeignCleint 中使用 Feign 配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.RequestLine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;thread-produce&quot;, configuration = FeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConfigurationClient</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign默认支持的 契约配置形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /getUserNames&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启用全局默认的配置"><a href="#启用全局默认的配置" class="headerlink" title="启用全局默认的配置"></a>启用全局默认的配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启全局的Feign配置</span></span><br><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = FeignConfiguration.class)</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用SpringBoot配置文件形式"><a href="#使用SpringBoot配置文件形式" class="headerlink" title="使用SpringBoot配置文件形式"></a>使用SpringBoot配置文件形式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#为单独的服务配置Feign配置 (这里的名字是你的服务的名字)</span></span><br><span class="line">      <span class="attr">thread-produce:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span> <span class="comment">#配置Feign日志 为full</span></span><br><span class="line">      <span class="comment">#配置全局的Feign配置</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br></pre></td></tr></table></figure>

<h2 id="6-4-手动创建FeignClient-Feign-builder"><a href="#6-4-手动创建FeignClient-Feign-builder" class="headerlink" title="6.4 手动创建FeignClient (Feign.builder)"></a>6.4 手动创建FeignClient (Feign.builder)</h2><blockquote>
<p>消费者通过BasicHttp验证方式访问生产者服务，根据SprigSecurity提供不同的用户和角色来创建不同的FeignClient</p>
<p>不同的FeignClient 携带着不同的 用户信息 到了 生产者那里 根据携带信息的权限来进行处理</p>
</blockquote>
<h3 id="为生产者服务提供BasicHttp验证方式"><a href="#为生产者服务提供BasicHttp验证方式" class="headerlink" title="为生产者服务提供BasicHttp验证方式"></a>为生产者服务提供BasicHttp验证方式</h3><p>提供两个用户：[xiaoming  123  角色role-user] 和  [zhangsan 123  角色role-admin]  两个用户 分别对应两个角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开启HttpBasic认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明无密码加密</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserDetails customUserDetails;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(<span class="keyword">this</span>.customUserDetails).passwordEncoder(<span class="keyword">this</span>.passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置授权和实体的服务</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetails</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(username.equals(<span class="string">&quot;xiaoming&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SecurityUser(<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;123&quot;</span>, <span class="string">&quot;role-user&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(username.equals(<span class="string">&quot;zhangsan&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SecurityUser(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;role-admin&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置用户和授权实体</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SecurityUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(String username, String password, String role)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">            <span class="keyword">this</span>.role = role;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">            Collection&lt;GrantedAuthority&gt; collection = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line">            SimpleGrantedAuthority simpleGrantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="keyword">this</span>.role);</span><br><span class="line">            collection.add(simpleGrantedAuthority);</span><br><span class="line">            <span class="keyword">return</span> collection;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生产者服务获取现在登录用户的信息，根据用户信息的不同做不能的处理"><a href="#生产者服务获取现在登录用户的信息，根据用户信息的不同做不能的处理" class="headerlink" title="生产者服务获取现在登录用户的信息，根据用户信息的不同做不能的处理"></a>生产者服务获取现在登录用户的信息，根据用户信息的不同做不能的处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取登录用户</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/loginName&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLoginName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String username = <span class="string">&quot;&quot;</span>;	<span class="comment">//用户名</span></span><br><span class="line">    String password = <span class="string">&quot;&quot;</span>;	<span class="comment">//密码</span></span><br><span class="line">    String role = <span class="string">&quot;&quot;</span>;		<span class="comment">//角色</span></span><br><span class="line">    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    <span class="keyword">if</span>(principal <span class="keyword">instanceof</span> UserDetails)&#123;</span><br><span class="line">        UserDetails userDetails = (UserDetails)principal;</span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = userDetails.getAuthorities();</span><br><span class="line">        <span class="keyword">for</span>(GrantedAuthority grantedAuthority : authorities)&#123;</span><br><span class="line">            username = userDetails.getUsername();</span><br><span class="line">            password = userDetails.getPassword();</span><br><span class="line">            role = grantedAuthority.getAuthority();</span><br><span class="line">            logger.info(<span class="string">&quot;用户名：&#123;&#125;\t密码：&#123;&#125;\t角色：&#123;&#125;&quot;</span>, username, password, role);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;当前用户&lt;/h1&gt;&lt;br/&gt;用户名：&quot;</span>+ username +<span class="string">&quot;\t密码：&quot;</span>+ password +<span class="string">&quot;\t角色：&quot;</span> + role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者服务创建公共的FeignClient"><a href="#消费者服务创建公共的FeignClient" class="headerlink" title="消费者服务创建公共的FeignClient"></a>消费者服务创建公共的FeignClient</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;basicAuth-produce&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasicAuthFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/loginName&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoginName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者服务通过Feign-builder创建不同权限Client实例"><a href="#消费者服务通过Feign-builder创建不同权限Client实例" class="headerlink" title="消费者服务通过Feign.builder创建不同权限Client实例"></a>消费者服务通过Feign.builder创建不同权限Client实例</h3><p><strong><code>new BasicAuthRequestInterceptor(&quot;xiaoming&quot;,&quot;123&quot;)</code>   通过BasicHttp方式验证用户</strong></p>
<p><strong><code>target(BasicAuthFeignClient.class,&quot;http://basicAuth-produce:8083&quot;)</code>  要构建的FeignClient实例和生产者服务的url</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(FeignClientsConfiguration.class)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicAuthFeignController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户FeignClient</span></span><br><span class="line">    <span class="keyword">private</span> BasicAuthFeignClient userFeignClient;</span><br><span class="line">    <span class="comment">//管理员Feignclient</span></span><br><span class="line">    <span class="keyword">private</span> BasicAuthFeignClient adminFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Controller时创建 根据用户和角色的不同 创建不同形态的 Client</span></span><br><span class="line"><span class="comment">     * 利用BasicHttp 进行认证的方式 传输不同的用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decoder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encoder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contract</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicAuthFeignController</span><span class="params">(Decoder decoder, Encoder encoder, Client client, Contract contract)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里的构造方法的参数 是通过 <span class="doctag">@Import</span>(FeignClientsConfiguration.class)导入Bean的方式注入进来的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.userFeignClient= Feign.builder().client(client).</span><br><span class="line">            					encoder(encoder).decoder(decoder).contract(contract).</span><br><span class="line">      			requestInterceptor(<span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;123&quot;</span>)).</span><br><span class="line">                target(BasicAuthFeignClient.class,<span class="string">&quot;http://basicAuth-produce:8083&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.adminFeignClient = Feign.builder().client(client).encoder(encoder).</span><br><span class="line">            					decoder(decoder).contract(contract).</span><br><span class="line">                requestInterceptor(<span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;123&quot;</span>)).</span><br><span class="line">                target(BasicAuthFeignClient.class,<span class="string">&quot;http://basicAuth-produce:8083&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//管理员调用管理员的Client</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String loginName = adminFeignClient.getLoginName();</span><br><span class="line">        <span class="keyword">return</span> loginName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通用户调用普通用户的Client</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String loginName = userFeignClient.getLoginName();</span><br><span class="line">        <span class="keyword">return</span> loginName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Feign-builder-和-BasicAuthRequestInterceptor-的实现的操作过程"><a href="#Feign-builder-和-BasicAuthRequestInterceptor-的实现的操作过程" class="headerlink" title="Feign.builder() 和 BasicAuthRequestInterceptor 的实现的操作过程"></a>Feign.builder() 和 BasicAuthRequestInterceptor 的实现的操作过程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Feign.builder().client(client).encoder(encoder).decoder(decoder).contract(contract).</span><br><span class="line">requestInterceptor(<span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;123&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><strong><code>client(client).encoder(encoder).decoder(decoder).contract(contract)</code> 这一部分正常为FeignClient设置默认的设置信息通过<code>@Import(FeignClientsConfiguration.class)</code> 导入来的设置进行的配置</strong></p>
<p><code>requestInterceptor(new BasicAuthRequestInterceptor(&quot;xiaoming&quot;,&quot;123&quot;))</code> 设置BasicHttp认证的用户名和密码也就是生产者服务SpringSecurity配置的用户信息</p>
<h4 id="Feign的BasicAuthRequestInterceptor-实际上就是处理传过来的用户名和密码，最后在HTTP请求头上加上Authorization头设置，用于生产者服务的BasicHttp验证"><a href="#Feign的BasicAuthRequestInterceptor-实际上就是处理传过来的用户名和密码，最后在HTTP请求头上加上Authorization头设置，用于生产者服务的BasicHttp验证" class="headerlink" title="Feign的BasicAuthRequestInterceptor 实际上就是处理传过来的用户名和密码，最后在HTTP请求头上加上Authorization头设置，用于生产者服务的BasicHttp验证"></a>Feign的BasicAuthRequestInterceptor 实际上就是处理传过来的用户名和密码，最后在HTTP请求头上加上Authorization头设置，用于生产者服务的BasicHttp验证</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> feign.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> feign.Util;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicAuthRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String headerValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicAuthRequestInterceptor</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(username, password, Util.ISO_8859_1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicAuthRequestInterceptor</span><span class="params">(String username, String password, Charset charset)</span> </span>&#123;</span><br><span class="line">        Util.checkNotNull(username, <span class="string">&quot;username&quot;</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">        Util.checkNotNull(password, <span class="string">&quot;password&quot;</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">this</span>.headerValue = <span class="string">&quot;Basic &quot;</span> + base64Encode((username + <span class="string">&quot;:&quot;</span> + password).getBytes(charset));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">base64Encode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encode(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加入basicHttp用户信息</span></span><br><span class="line">        template.header(<span class="string">&quot;Authorization&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="keyword">this</span>.headerValue&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-Feign对继承的支持"><a href="#6-5-Feign对继承的支持" class="headerlink" title="6.5 Feign对继承的支持"></a>6.5 Feign对继承的支持</h2><blockquote>
<p>Feign支持自定义api接口 用于FeignClient继承，但是api中的所用的请求的注解要和FeignClient中用的契约一直    </p>
</blockquote>
<h3 id="定义Api接口"><a href="#定义Api接口" class="headerlink" title="定义Api接口"></a>定义Api接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Feign Client 支持集成接口的形式来扩展FeignClient的接口</span></span><br><span class="line"><span class="comment"> * 但是继承过来的接口 他的契约格式要按照FeignClient的契约格式来写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//SpringMVC契约格式  调用 服务生产者 提供的 /getUserNames 资源</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;/getUserNames&quot;)</span></span><br><span class="line"><span class="comment">//    public List&lt;String&gt; getUserNames();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Feign默认契约格式  调用 服务生产者 提供的 /getUserNames 资源</span></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /getUserNames&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FeignClient可以集成api的接口进行扩展自己的方法"><a href="#FeignClient可以集成api的接口进行扩展自己的方法" class="headerlink" title="FeignClient可以集成api的接口进行扩展自己的方法"></a>FeignClient可以集成api的接口进行扩展自己的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * extends UserService 通过集成接口的方式来扩展自己</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;thread-produce&quot;, configuration = FeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Feign默认的Client的请求写法</span></span><br><span class="line">    <span class="comment">//根据用户id获取用户名称</span></span><br><span class="line">    <span class="meta">@RequestLine(&quot;GET /user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserNameById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SpringMVC契约模式</span></span><br><span class="line"><span class="comment">//    @RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    public String getUserNameById(@PathVariable(&quot;id&quot;) int id);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此时FeignCleint就具备了UserService中继承过来的方法了</strong> </p>
<h2 id="6-6-Feign-对压缩的支持"><a href="#6-6-Feign-对压缩的支持" class="headerlink" title="6.6 Feign 对压缩的支持"></a>6.6 Feign 对压缩的支持</h2><blockquote>
<p>Feign支持对 请求和响应进行压缩</p>
</blockquote>
<h3 id="开启-请求和响应的压缩功能"><a href="#开启-请求和响应的压缩功能" class="headerlink" title="开启 请求和响应的压缩功能"></a>开启 请求和响应的压缩功能</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启Feign对与请求和响应的压缩</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="更详细的配置"><a href="#更详细的配置" class="headerlink" title="更详细的配置"></a>更详细的配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置FeignRest调用配置</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#开启Feign对与请求和响应的压缩</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">&quot;text/xml&quot;</span><span class="string">,</span> <span class="string">&quot;application/xml&quot;</span><span class="string">,</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="6-7-Feign的日志配置"><a href="#6-7-Feign的日志配置" class="headerlink" title="6.7 Feign的日志配置"></a>6.7 Feign的日志配置</h2><h3 id="Feign的日志级别"><a href="#Feign的日志级别" class="headerlink" title="Feign的日志级别"></a>Feign的日志级别</h3><ul>
<li>NONE    无记录</li>
<li>BASIC  只记录请求方法，URL，响应状态代码，执行时间</li>
<li>HEADERS 记录基本信息，请求和响应标头</li>
<li>FULL 记录请求和响应的头文件，正文和元数据</li>
</ul>
<h3 id="开启Debug日志级别"><a href="#开启Debug日志级别" class="headerlink" title="开启Debug日志级别"></a>开启Debug日志级别</h3><p>默认的Feign只对Debug级别提供显示，所以修改日志级别为debug</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment">#要打印日志的 FeignClient 的包路径</span></span><br><span class="line">    <span class="attr">thread.consumer.feign:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h3 id="yaml配置Feign的日志显示的内容的级别"><a href="#yaml配置Feign的日志显示的内容的级别" class="headerlink" title="yaml配置Feign的日志显示的内容的级别"></a>yaml配置Feign的日志显示的内容的级别</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#为单独的 服务配置Feign配置</span></span><br><span class="line">      <span class="attr">thread-produce:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span> <span class="comment">#配置Feign日志 为full</span></span><br><span class="line">      <span class="comment">#配置全局的Feign配置</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br></pre></td></tr></table></figure>

<h3 id="java配置类配置，在feign配置类中加入Logger-level-配置"><a href="#java配置类配置，在feign配置类中加入Logger-level-配置" class="headerlink" title="java配置类配置，在feign配置类中加入Logger.level 配置"></a>java配置类配置，在feign配置类中加入Logger.level 配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置 Feign 的日志级别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Logger.<span class="function">Level <span class="title">level</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="让Feign可以在INFO级别下显示"><a href="#让Feign可以在INFO级别下显示" class="headerlink" title="让Feign可以在INFO级别下显示"></a>让Feign可以在INFO级别下显示</h3><p><strong>重写Feign的Logger的实现类方式，默认应该是用的feign.slf4j.Slf4jLogger这个类，比着这个实现一下把DEBUG处理改成INFO</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写feign.Logger实现 用SpringBoot的自定义配置 大于 原本自动注入的原则 这里重写了实现 优先用这里 </span></span><br><span class="line"><span class="comment"> * 把下面原本判断Debug级别的位置 换成INFO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadFeignLogger</span> <span class="keyword">extends</span> <span class="title">feign</span>.<span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> org.slf4j.Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadFeignLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Logger.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadFeignLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LoggerFactory.getLogger(clazz));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadFeignLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LoggerFactory.getLogger(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ThreadFeignLogger(org.slf4j.Logger logger) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(String configKey, Level logLevel, Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">            <span class="keyword">super</span>.logRequest(configKey, logLevel, request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">logAndRebufferResponse</span><span class="params">(String configKey, Level logLevel, Response response, <span class="keyword">long</span> elapsedTime)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.logger.isInfoEnabled() ? <span class="keyword">super</span>.logAndRebufferResponse(configKey, logLevel, response, elapsedTime) : response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String configKey, String format, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.info(String.format(methodTag(configKey) + format, args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在Feign的 全局 或 自定义 服务配置类中声明这个重写的@Bean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *让Feign可以再INFO级别下显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">logger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadFeignLogger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-8-使用Feign构建多参数请求"><a href="#6-8-使用Feign构建多参数请求" class="headerlink" title="6.8 使用Feign构建多参数请求"></a>6.8 使用Feign构建多参数请求</h2><h3 id="例如生产者服务Get和Post接口方式"><a href="#例如生产者服务Get和Post接口方式" class="headerlink" title="例如生产者服务Get和Post接口方式"></a>例如生产者服务Get和Post接口方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserNameByUserGET</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = user.getId();</span><br><span class="line">    <span class="keyword">return</span> userService.getUserNameById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/post/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserNameByUserPOST</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = user.getId();</span><br><span class="line">    <span class="keyword">return</span> userService.getUserNameById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FeignClient实现方式-RequestBody-只支持PostBody是json的形式-Get请求不支持"><a href="#FeignClient实现方式-RequestBody-只支持PostBody是json的形式-Get请求不支持" class="headerlink" title="FeignClient实现方式   @RequestBody 只支持PostBody是json的形式 Get请求不支持"></a>FeignClient实现方式   @RequestBody 只支持PostBody是json的形式 Get请求不支持</h3><blockquote>
<p>Get方式的 参数 必须要加上 @RequestParam 注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * extends UserService 通过集成接口的方式来扩展自己</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;thread-produce&quot;, configuration = FeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Feign默认的Client的请求写法</span></span><br><span class="line">    <span class="comment">//根据用户id获取用户名称</span></span><br><span class="line"><span class="comment">//    @RequestLine(&quot;GET /user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    public String getUserNameById(@Param(&quot;id&quot;) int id);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SpringMVC契约模式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserNameByIdGET</span><span class="params">(<span class="meta">@RequestParam</span> <span class="keyword">int</span> id, <span class="meta">@RequestParam</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/post/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserNameByIdPOST</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-9-使用-Feign-上传文件"><a href="#6-9-使用-Feign-上传文件" class="headerlink" title="6.9 使用 Feign 上传文件"></a>6.9 使用 Feign 上传文件</h2><blockquote>
<p>上传主要代码在 Consumer 的 FileUploadCleint 和 FileUploadConfiguration类中</p>
</blockquote>
<h3 id="添加Feign对于上传文件的依赖"><a href="#添加Feign对于上传文件的依赖" class="headerlink" title="添加Feign对于上传文件的依赖"></a>添加Feign对于上传文件的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign对于上传文件的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot配置上传文件大小无限制"><a href="#SpringBoot配置上传文件大小无限制" class="headerlink" title="SpringBoot配置上传文件大小无限制"></a>SpringBoot配置上传文件大小无限制</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">-1</span> <span class="comment">#设置上传文件大小无限制</span></span><br></pre></td></tr></table></figure>

<h3 id="生产者提供一个上传文件的接口，写法就是SpringMVC的上传接口的写法"><a href="#生产者提供一个上传文件的接口，写法就是SpringMVC的上传接口的写法" class="headerlink" title="生产者提供一个上传文件的接口，写法就是SpringMVC的上传接口的写法"></a>生产者提供一个上传文件的接口，写法就是SpringMVC的上传接口的写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart</span> MultipartFile file)</span></span>&#123;</span><br><span class="line">        String upload = fileUploadClient.upload(file);</span><br><span class="line">        <span class="keyword">return</span> upload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消费者-创建上传文件的FeignClient进行调用生产者"><a href="#消费者-创建上传文件的FeignClient进行调用生产者" class="headerlink" title="消费者 创建上传文件的FeignClient进行调用生产者"></a>消费者 创建上传文件的FeignClient进行调用生产者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;file-upload&quot;, configuration = FileUploadClient.FileUploadConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileUploadClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">//consumes设置提交类型是什么</span></span><br><span class="line">    <span class="comment">//这里 consumes = MediaType.MULTIPART_FORM_DATA_VALUE 设置上是formdata的方式</span></span><br><span class="line">    <span class="comment">//produces 设置返回类型是什么</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span></span><br><span class="line"><span class="meta">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;, </span></span><br><span class="line"><span class="meta">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span>MultipartFile file)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义FeignUpload的配置</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileUploadConfiguration</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加载用于Spring上传的 Encoder</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Encoder <span class="title">encoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
</search>
